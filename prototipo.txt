#include <Keypad.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <SPI.h>
#include <ArduinoJson.h>
#include <UniversalTelegramBot.h>

#define CHAT_ID "5247194040"
//Pino onde está o buzzer
int pinBuzzer = 2;
//Pino onde está o sensor de presença
int pinPresenca = 33;
//estado do sensor de presença
int estadoPresenca = LOW;
int val = 0;
int pinEmergencia = 13;
int estadoEmergencia = LOW;

int botRequestDelay = 1000;
unsigned long lastTimeBotRan;
 
 
//Token do meu bot
#define BOT_TOKEN "5372218031:AAGRlWqmZX82x7KM0JhSEA0bSS_fAN7kbCg"

String senha = "8234232";
int tamanhoSenha = senha.length();
char tentativaSenha[100];
int contador = 0;


#define LINHAS 4
#define COLUNAS 4
char teclas[LINHAS][COLUNAS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};

byte pinosColuna[COLUNAS] = {14,25,26,27}; // Pins connected to C1, C2, C3, C4
byte pinosLinha[LINHAS] = {18,19,21,22}; // Pins connected to R1, R2, R3, R4

Keypad teclado = Keypad(makeKeymap(teclas), pinosLinha, pinosColuna, LINHAS, COLUNAS);

//Cliente para conexões seguras
WiFiClientSecure client;
//Objeto com os métodos para comunicarmos pelo Telegram
UniversalTelegramBot bot(BOT_TOKEN, client);

 
//Quantidade de usuários que podem interagir com o bot

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++) {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    // Print the received message
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String welcome = "Welcome, " + from_name + ".\n";
        welcome += "/estadoSensor : Para verificar o estado do sensor de presenca\n";
  	welcome += "/liberado : Para liberar o acesso a residencia\n";
  	welcome += "/negado : Para negar o acesso a residencia";;
      bot.sendMessage(chat_id, welcome, "");
    }

    else if (text == "/estadoSensor") {
      if (estadoPresenca == LOW) {Serial.println("Nenhuma presenca detectada!");}

      else {Serial.println("Presenca detectada!");}
    }
    
    else if (text == "/liberado") {
     int tempo;
     while (estadoPresenca == HIGH) {tempo = millis();}
     Serial.print("O tempo total que o entregador permaneceu dentro da residencia foi de: ");
     Serial.println(tempo);
    }
    
    else if (text == "/negado") {
      if (estadoPresenca == HIGH) {Serial.print("Um invasor foi detectado! O alarme de emergencia sera disparado!");tone(pinEmergencia, 31);}
      }

    else
    {
      Serial.println("Comando invalido!");
      //mostra mensagem que a opção não é válida e mostra as opções
    }

  }
}


void setup() {

  Serial.begin(115200);
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinPresenca,INPUT);
  pinMode(pinEmergencia,OUTPUT);

  WiFi.begin("Wokwi-GUEST", "", 6);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
 
  Serial.println("Connected to the WiFi network");
}

void loop() {

   if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }

  char tecla = teclado.getKey();

  if (contador == tamanhoSenha) {

    if (senha.compareTo(tentativaSenha) != 0) {Serial.println("A senha digitada esta incorreta!");}
    else {Serial.println("A porta foi aberta!");}
    contador = 0;
  }


  if (tecla != NO_KEY) {

    tentativaSenha[contador] = tecla;
    contador += 1;
    
    tone(pinBuzzer, 31);
    delay(100);
    noTone(pinBuzzer);
    delay(100);

    Serial.println(tecla);
  }

  val = digitalRead(pinPresenca);  // read input value
  if (val == HIGH) {            // check if the input is HIGH
    if (estadoPresenca == LOW) {

      Serial.println("Presenca detectada!");
      estadoPresenca = HIGH;
    }
  } else {
    if (estadoPresenca == HIGH) {
      Serial.println("Nenhuma presenca detectada!");
      estadoPresenca = LOW;
    }
  }

}
 









